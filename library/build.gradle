//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.

// Custom definitions may go here

// Include common definitions from above.
//apply from: '../build.common.gradle'

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 26

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../libs/ftc.debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26

        versionName "$ftc_version.2"
        versionCode 6
    }

    // Advanced user code might just want to use Vuforia directly, so we set up the libs as needed
    buildTypes {
        release {
            debuggable true
            ndk {
                abiFilters "armeabi-v7a"
            }

            //minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            ndk {
                abiFilters "armeabi-v7a"
            }

            //minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false //TODO actually ignore the exact lint checks that error
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir "../libs"
    }
}

group = 'com.github.Pattonville-Robotics'
version = android.defaultConfig.versionName
project.archivesBaseName = 'Common-Code'

dependencies {
    implementation "org.first.ftc:inspection:$ftc_version"
    implementation "org.first.ftc:blocks:$ftc_version"
    implementation "org.first.ftc:robotcore:$ftc_version"
    implementation "org.first.ftc:hardware:$ftc_version"
    implementation "org.first.ftc:ftc-common:$ftc_version"
    implementation "org.first.ftc:analytics:$ftc_version"
    implementation "org.first.ftc:wireless-p2p:$ftc_version"

    implementation 'org.apache.commons:commons-math3:3.6.1'

    implementation 'com.annimon:stream:1.1.8'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'com.google.guava:guava:23.2-android'

    implementation 'com.github.magneticflux-:opencv-repackaged:3.3.1'
}

//For JitPack

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
/*
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompiler
    task.from variant.javaCompiler.destinationDir
    artifacts.add 'archives', task
}
*/